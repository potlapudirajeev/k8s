watch kubectl get nodes
watch kubectl get pods
kubectl run redis -l tier=db --image=redis:alpine
kubectl expose pod redis --port=6379 --name redis-service
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -oyaml > redis1-pod3.yml
kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3 -oyaml > redis1-pod4.yml
kubectl run custom-nginx --image=nginx --port=8080 --dry-run=client -oyaml > redis1-pod6.yml
kubectl create namespace dev-ns1 --dry-run=client -oyaml > redis1-pod7.yml
kubectl create deployment redis-deploy --image=redis --namespace=dev-ns --replicas=2 --dry-run=client -oyaml > redis1-pod8.yml

Create a pod called httpd using the image httpd:alpine in the default namespace. Next, create a service of type ClusterIP by the same name (httpd). The target port for the service should be 80.
kubectl run httpd --image=httpd:alpine --port=80 --expose
kubectl get pods --namespace kube-system

below 16 line will create yaml file
cat > load-limited.yaml <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: load-limited
spec:
  containers:
  - name: cpu-load-limited
    image: vish/stress
    args:
    - -cpus
    - "2"
    resources:
      limits:
        cpu: "0.5"
      requests:
        cpu: "0.5"
EOF


watch kubectl top pods

